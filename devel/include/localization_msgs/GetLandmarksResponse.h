// Generated by gencpp from file localization_msgs/GetLandmarksResponse.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_MSGS_MESSAGE_GETLANDMARKSRESPONSE_H
#define LOCALIZATION_MSGS_MESSAGE_GETLANDMARKSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <localization_msgs/Landmark.h>

namespace localization_msgs
{
template <class ContainerAllocator>
struct GetLandmarksResponse_
{
  typedef GetLandmarksResponse_<ContainerAllocator> Type;

  GetLandmarksResponse_()
    : landmarks()  {
    }
  GetLandmarksResponse_(const ContainerAllocator& _alloc)
    : landmarks(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::localization_msgs::Landmark_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::localization_msgs::Landmark_<ContainerAllocator> >::other >  _landmarks_type;
  _landmarks_type landmarks;




  typedef boost::shared_ptr< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetLandmarksResponse_

typedef ::localization_msgs::GetLandmarksResponse_<std::allocator<void> > GetLandmarksResponse;

typedef boost::shared_ptr< ::localization_msgs::GetLandmarksResponse > GetLandmarksResponsePtr;
typedef boost::shared_ptr< ::localization_msgs::GetLandmarksResponse const> GetLandmarksResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace localization_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'localization_msgs': ['/home/marc/catkin_ws/src/localization_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c78469eba290d53592188bb13a0b4de0";
  }

  static const char* value(const ::localization_msgs::GetLandmarksResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc78469eba290d535ULL;
  static const uint64_t static_value2 = 0x92188bb13a0b4de0ULL;
};

template<class ContainerAllocator>
struct DataType< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization_msgs/GetLandmarksResponse";
  }

  static const char* value(const ::localization_msgs::GetLandmarksResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Landmark[] landmarks\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: localization_msgs/Landmark\n\
uint8 id\n\
float64 pos_x\n\
float64 pos_y\n\
float64 pos_z\n\
";
  }

  static const char* value(const ::localization_msgs::GetLandmarksResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.landmarks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetLandmarksResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization_msgs::GetLandmarksResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization_msgs::GetLandmarksResponse_<ContainerAllocator>& v)
  {
    s << indent << "landmarks[]" << std::endl;
    for (size_t i = 0; i < v.landmarks.size(); ++i)
    {
      s << indent << "  landmarks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::localization_msgs::Landmark_<ContainerAllocator> >::stream(s, indent + "    ", v.landmarks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_MSGS_MESSAGE_GETLANDMARKSRESPONSE_H
