// Generated by gencpp from file localization_msgs/TransformedMapDense.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_MSGS_MESSAGE_TRANSFORMEDMAPDENSE_H
#define LOCALIZATION_MSGS_MESSAGE_TRANSFORMEDMAPDENSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <localization_msgs/MapDense.h>
#include <localization_msgs/Pose2DWithCovarianceStamped.h>

namespace localization_msgs
{
template <class ContainerAllocator>
struct TransformedMapDense_
{
  typedef TransformedMapDense_<ContainerAllocator> Type;

  TransformedMapDense_()
    : header()
    , map()
    , transform()
    , valid(false)
    , corr_rotation(0.0)
    , corr_translation(0.0)  {
    }
  TransformedMapDense_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , map(_alloc)
    , transform(_alloc)
    , valid(false)
    , corr_rotation(0.0)
    , corr_translation(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::localization_msgs::MapDense_<ContainerAllocator>  _map_type;
  _map_type map;

   typedef  ::localization_msgs::Pose2DWithCovarianceStamped_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef double _corr_rotation_type;
  _corr_rotation_type corr_rotation;

   typedef double _corr_translation_type;
  _corr_translation_type corr_translation;




  typedef boost::shared_ptr< ::localization_msgs::TransformedMapDense_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization_msgs::TransformedMapDense_<ContainerAllocator> const> ConstPtr;

}; // struct TransformedMapDense_

typedef ::localization_msgs::TransformedMapDense_<std::allocator<void> > TransformedMapDense;

typedef boost::shared_ptr< ::localization_msgs::TransformedMapDense > TransformedMapDensePtr;
typedef boost::shared_ptr< ::localization_msgs::TransformedMapDense const> TransformedMapDenseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization_msgs::TransformedMapDense_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization_msgs::TransformedMapDense_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace localization_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'localization_msgs': ['/home/marc/catkin_ws/src/localization_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::localization_msgs::TransformedMapDense_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization_msgs::TransformedMapDense_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_msgs::TransformedMapDense_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_msgs::TransformedMapDense_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_msgs::TransformedMapDense_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_msgs::TransformedMapDense_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization_msgs::TransformedMapDense_<ContainerAllocator> >
{
  static const char* value()
  {
    return "378309153e98d7add0d6a551d203ad70";
  }

  static const char* value(const ::localization_msgs::TransformedMapDense_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x378309153e98d7adULL;
  static const uint64_t static_value2 = 0xd0d6a551d203ad70ULL;
};

template<class ContainerAllocator>
struct DataType< ::localization_msgs::TransformedMapDense_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization_msgs/TransformedMapDense";
  }

  static const char* value(const ::localization_msgs::TransformedMapDense_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization_msgs::TransformedMapDense_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
localization_msgs/MapDense map\n\
localization_msgs/Pose2DWithCovarianceStamped transform\n\
bool valid\n\
float64 corr_rotation\n\
float64 corr_translation\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: localization_msgs/MapDense\n\
nav_msgs/MapMetaData metadata\n\
sensor_msgs/Image image\n\
std_msgs/Bool valid\n\
\n\
================================================================================\n\
MSG: nav_msgs/MapMetaData\n\
# This hold basic information about the characterists of the OccupancyGrid\n\
\n\
# The time at which the map was loaded\n\
time map_load_time\n\
# The map resolution [m/cell]\n\
float32 resolution\n\
# Map width [cells]\n\
uint32 width\n\
# Map height [cells]\n\
uint32 height\n\
# The origin of the map [m, m, rad].  This is the real-world pose of the\n\
# cell (0,0) in the map.\n\
geometry_msgs/Pose origin\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Bool\n\
bool data\n\
================================================================================\n\
MSG: localization_msgs/Pose2DWithCovarianceStamped\n\
std_msgs/Header header\n\
geometry_msgs/Pose2D pose\n\
float64[9] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const ::localization_msgs::TransformedMapDense_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization_msgs::TransformedMapDense_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.map);
      stream.next(m.transform);
      stream.next(m.valid);
      stream.next(m.corr_rotation);
      stream.next(m.corr_translation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransformedMapDense_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization_msgs::TransformedMapDense_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization_msgs::TransformedMapDense_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "map: ";
    s << std::endl;
    Printer< ::localization_msgs::MapDense_<ContainerAllocator> >::stream(s, indent + "  ", v.map);
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::localization_msgs::Pose2DWithCovarianceStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "corr_rotation: ";
    Printer<double>::stream(s, indent + "  ", v.corr_rotation);
    s << indent << "corr_translation: ";
    Printer<double>::stream(s, indent + "  ", v.corr_translation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_MSGS_MESSAGE_TRANSFORMEDMAPDENSE_H
