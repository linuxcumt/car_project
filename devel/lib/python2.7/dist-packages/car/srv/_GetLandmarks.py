# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car/GetLandmarksRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class GetLandmarksRequest(genpy.Message):
  _md5sum = "df1dcb97700423fef9fc16d14781286a"
  _type = "car/GetLandmarksRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point point
std_msgs/Float64 width_meter
std_msgs/Float64 heigth_meter

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: std_msgs/Float64
float64 data"""
  __slots__ = ['point','width_meter','heigth_meter']
  _slot_types = ['geometry_msgs/Point','std_msgs/Float64','std_msgs/Float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       point,width_meter,heigth_meter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetLandmarksRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      if self.width_meter is None:
        self.width_meter = std_msgs.msg.Float64()
      if self.heigth_meter is None:
        self.heigth_meter = std_msgs.msg.Float64()
    else:
      self.point = geometry_msgs.msg.Point()
      self.width_meter = std_msgs.msg.Float64()
      self.heigth_meter = std_msgs.msg.Float64()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5d().pack(_x.point.x, _x.point.y, _x.point.z, _x.width_meter.data, _x.heigth_meter.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      if self.width_meter is None:
        self.width_meter = std_msgs.msg.Float64()
      if self.heigth_meter is None:
        self.heigth_meter = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.point.x, _x.point.y, _x.point.z, _x.width_meter.data, _x.heigth_meter.data,) = _get_struct_5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5d().pack(_x.point.x, _x.point.y, _x.point.z, _x.width_meter.data, _x.heigth_meter.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      if self.width_meter is None:
        self.width_meter = std_msgs.msg.Float64()
      if self.heigth_meter is None:
        self.heigth_meter = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.point.x, _x.point.y, _x.point.z, _x.width_meter.data, _x.heigth_meter.data,) = _get_struct_5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car/GetLandmarksResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import car.msg

class GetLandmarksResponse(genpy.Message):
  _md5sum = "c78469eba290d53592188bb13a0b4de0"
  _type = "car/GetLandmarksResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Landmark[] landmarks




================================================================================
MSG: car/Landmark
uint8 id
float64 pos_x
float64 pos_y
float64 pos_z
"""
  __slots__ = ['landmarks']
  _slot_types = ['car/Landmark[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       landmarks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetLandmarksResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.landmarks is None:
        self.landmarks = []
    else:
      self.landmarks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarks:
        _x = val1
        buff.write(_get_struct_B3d().pack(_x.id, _x.pos_x, _x.pos_y, _x.pos_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.landmarks is None:
        self.landmarks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarks = []
      for i in range(0, length):
        val1 = car.msg.Landmark()
        _x = val1
        start = end
        end += 25
        (_x.id, _x.pos_x, _x.pos_y, _x.pos_z,) = _get_struct_B3d().unpack(str[start:end])
        self.landmarks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarks:
        _x = val1
        buff.write(_get_struct_B3d().pack(_x.id, _x.pos_x, _x.pos_y, _x.pos_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.landmarks is None:
        self.landmarks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarks = []
      for i in range(0, length):
        val1 = car.msg.Landmark()
        _x = val1
        start = end
        end += 25
        (_x.id, _x.pos_x, _x.pos_y, _x.pos_z,) = _get_struct_B3d().unpack(str[start:end])
        self.landmarks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3d = None
def _get_struct_B3d():
    global _struct_B3d
    if _struct_B3d is None:
        _struct_B3d = struct.Struct("<B3d")
    return _struct_B3d
class GetLandmarks(object):
  _type          = 'car/GetLandmarks'
  _md5sum = '06cc287e6db3b6bdd1132d19203493c2'
  _request_class  = GetLandmarksRequest
  _response_class = GetLandmarksResponse
